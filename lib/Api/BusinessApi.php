<?php
/**
 * BusinessApi
 * PHP version 7.4
 *
 * @category Class
 * @package  Kinde\KindeSDK
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Kinde Management API
 *
 * Provides endpoints to manage your Kinde Businesses
 *
 * The version of the OpenAPI document: 1
 * Contact: support@kinde.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.1.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Kinde\KindeSDK\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Kinde\KindeSDK\ApiException;
use Kinde\KindeSDK\Configuration;
use Kinde\KindeSDK\HeaderSelector;
use Kinde\KindeSDK\ObjectSerializer;
use Kinde\KindeSDK\Sdk\Storage\Storage;

/**
 * BusinessApi Class Doc Comment
 *
 * @category Class
 * @package  Kinde\KindeSDK
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class BusinessApi
{
    /**
     * @var Storage
     */
    protected $storage;

    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param Configuration   $config
     * @param ClientInterface $client
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        Configuration $config,
        ClientInterface $client = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->config = $config;
        $this->client = $client ?: new Client();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
        
        $this->storage = Storage::getInstance();
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation getBusiness
     *
     * List business details
     *
     * @param  string $code Business code. (required)
     * @param  string $name Business name. (required)
     * @param  string $email Email associated with business. (required)
     * @param  string $phone Phone number associated with business. (optional)
     * @param  string $industry The industry your business is in. (optional)
     * @param  string $timezone The timezone your business is in. (optional)
     * @param  string $privacy_url Your Privacy policy URL. (optional)
     * @param  string $terms_url Your Terms and Conditions URL. (optional)
     *
     * @throws \Kinde\KindeSDK\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Kinde\KindeSDK\Model\SuccessResponse
     */
    public function getBusiness($code, $name, $email, $phone = null, $industry = null, $timezone = null, $privacy_url = null, $terms_url = null)
    {
        list($response) = $this->getBusinessWithHttpInfo($code, $name, $email, $phone, $industry, $timezone, $privacy_url, $terms_url);
        return $response;
    }

    /**
     * Operation getBusinessWithHttpInfo
     *
     * List business details
     *
     * @param  string $code Business code. (required)
     * @param  string $name Business name. (required)
     * @param  string $email Email associated with business. (required)
     * @param  string $phone Phone number associated with business. (optional)
     * @param  string $industry The industry your business is in. (optional)
     * @param  string $timezone The timezone your business is in. (optional)
     * @param  string $privacy_url Your Privacy policy URL. (optional)
     * @param  string $terms_url Your Terms and Conditions URL. (optional)
     *
     * @throws \Kinde\KindeSDK\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Kinde\KindeSDK\Model\SuccessResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getBusinessWithHttpInfo($code, $name, $email, $phone = null, $industry = null, $timezone = null, $privacy_url = null, $terms_url = null)
    {
        $request = $this->getBusinessRequest($code, $name, $email, $phone, $industry, $timezone, $privacy_url, $terms_url);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 201:
                    if ('\Kinde\KindeSDK\Model\SuccessResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Kinde\KindeSDK\Model\SuccessResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Kinde\KindeSDK\Model\SuccessResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Kinde\KindeSDK\Model\SuccessResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Kinde\KindeSDK\Model\SuccessResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getBusinessAsync
     *
     * List business details
     *
     * @param  string $code Business code. (required)
     * @param  string $name Business name. (required)
     * @param  string $email Email associated with business. (required)
     * @param  string $phone Phone number associated with business. (optional)
     * @param  string $industry The industry your business is in. (optional)
     * @param  string $timezone The timezone your business is in. (optional)
     * @param  string $privacy_url Your Privacy policy URL. (optional)
     * @param  string $terms_url Your Terms and Conditions URL. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getBusinessAsync($code, $name, $email, $phone = null, $industry = null, $timezone = null, $privacy_url = null, $terms_url = null)
    {
        return $this->getBusinessAsyncWithHttpInfo($code, $name, $email, $phone, $industry, $timezone, $privacy_url, $terms_url)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getBusinessAsyncWithHttpInfo
     *
     * List business details
     *
     * @param  string $code Business code. (required)
     * @param  string $name Business name. (required)
     * @param  string $email Email associated with business. (required)
     * @param  string $phone Phone number associated with business. (optional)
     * @param  string $industry The industry your business is in. (optional)
     * @param  string $timezone The timezone your business is in. (optional)
     * @param  string $privacy_url Your Privacy policy URL. (optional)
     * @param  string $terms_url Your Terms and Conditions URL. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getBusinessAsyncWithHttpInfo($code, $name, $email, $phone = null, $industry = null, $timezone = null, $privacy_url = null, $terms_url = null)
    {
        $returnType = '\Kinde\KindeSDK\Model\SuccessResponse';
        $request = $this->getBusinessRequest($code, $name, $email, $phone, $industry, $timezone, $privacy_url, $terms_url);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getBusiness'
     *
     * @param  string $code Business code. (required)
     * @param  string $name Business name. (required)
     * @param  string $email Email associated with business. (required)
     * @param  string $phone Phone number associated with business. (optional)
     * @param  string $industry The industry your business is in. (optional)
     * @param  string $timezone The timezone your business is in. (optional)
     * @param  string $privacy_url Your Privacy policy URL. (optional)
     * @param  string $terms_url Your Terms and Conditions URL. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getBusinessRequest($code, $name, $email, $phone = null, $industry = null, $timezone = null, $privacy_url = null, $terms_url = null)
    {
        // verify the required parameter 'code' is set
        if ($code === null || (is_array($code) && count($code) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $code when calling getBusiness'
            );
        }
        // verify the required parameter 'name' is set
        if ($name === null || (is_array($name) && count($name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling getBusiness'
            );
        }
        // verify the required parameter 'email' is set
        if ($email === null || (is_array($email) && count($email) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $email when calling getBusiness'
            );
        }

        $resourcePath = '/api/v1/business';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $code,
            'code', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $name,
            'name', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $email,
            'email', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $phone,
            'phone', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $industry,
            'industry', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $timezone,
            'timezone', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $privacy_url,
            'privacy_url', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $terms_url,
            'terms_url', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json; charset=utf-8']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json; charset=utf-8'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        } else {
            $token = $this->storage->getAccessToken();
            if (!empty($token)) {
                $headers['Authorization'] = 'Bearer ' . $token;
            }
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateBusiness
     *
     * Update business details
     *
     * @param  string $business_name Business name. (required)
     * @param  string $primary_email Email associated with business. (required)
     * @param  string $primary_phone Phone number associated with business. (optional)
     * @param  string $industry_key The key of the industry your business is in. (optional)
     * @param  string $timezone_id The ID of the timezone your business is in. (optional)
     * @param  string $privacy_url Your Privacy policy URL. (optional)
     * @param  string $terms_url Your Terms and Conditions URL. (optional)
     * @param  string $is_show_kinde_branding Display \&quot;Powered by Kinde\&quot; on your sign up, sign in, and subscription pages. (optional)
     * @param  bool $is_click_wrap Show a policy acceptance checkbox on sign up. (optional)
     * @param  string $partner_code Your Kinde Perk code. (optional)
     *
     * @throws \Kinde\KindeSDK\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Kinde\KindeSDK\Model\SuccessResponse|\Kinde\KindeSDK\Model\ErrorResponse
     */
    public function updateBusiness($business_name, $primary_email, $primary_phone = null, $industry_key = null, $timezone_id = null, $privacy_url = null, $terms_url = null, $is_show_kinde_branding = null, $is_click_wrap = null, $partner_code = null)
    {
        list($response) = $this->updateBusinessWithHttpInfo($business_name, $primary_email, $primary_phone, $industry_key, $timezone_id, $privacy_url, $terms_url, $is_show_kinde_branding, $is_click_wrap, $partner_code);
        return $response;
    }

    /**
     * Operation updateBusinessWithHttpInfo
     *
     * Update business details
     *
     * @param  string $business_name Business name. (required)
     * @param  string $primary_email Email associated with business. (required)
     * @param  string $primary_phone Phone number associated with business. (optional)
     * @param  string $industry_key The key of the industry your business is in. (optional)
     * @param  string $timezone_id The ID of the timezone your business is in. (optional)
     * @param  string $privacy_url Your Privacy policy URL. (optional)
     * @param  string $terms_url Your Terms and Conditions URL. (optional)
     * @param  string $is_show_kinde_branding Display \&quot;Powered by Kinde\&quot; on your sign up, sign in, and subscription pages. (optional)
     * @param  bool $is_click_wrap Show a policy acceptance checkbox on sign up. (optional)
     * @param  string $partner_code Your Kinde Perk code. (optional)
     *
     * @throws \Kinde\KindeSDK\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Kinde\KindeSDK\Model\SuccessResponse|\Kinde\KindeSDK\Model\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateBusinessWithHttpInfo($business_name, $primary_email, $primary_phone = null, $industry_key = null, $timezone_id = null, $privacy_url = null, $terms_url = null, $is_show_kinde_branding = null, $is_click_wrap = null, $partner_code = null)
    {
        $request = $this->updateBusinessRequest($business_name, $primary_email, $primary_phone, $industry_key, $timezone_id, $privacy_url, $terms_url, $is_show_kinde_branding, $is_click_wrap, $partner_code);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch ($statusCode) {
                case 201:
                    if ('\Kinde\KindeSDK\Model\SuccessResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Kinde\KindeSDK\Model\SuccessResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Kinde\KindeSDK\Model\SuccessResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Kinde\KindeSDK\Model\ErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Kinde\KindeSDK\Model\ErrorResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Kinde\KindeSDK\Model\ErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Kinde\KindeSDK\Model\SuccessResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Kinde\KindeSDK\Model\SuccessResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Kinde\KindeSDK\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateBusinessAsync
     *
     * Update business details
     *
     * @param  string $business_name Business name. (required)
     * @param  string $primary_email Email associated with business. (required)
     * @param  string $primary_phone Phone number associated with business. (optional)
     * @param  string $industry_key The key of the industry your business is in. (optional)
     * @param  string $timezone_id The ID of the timezone your business is in. (optional)
     * @param  string $privacy_url Your Privacy policy URL. (optional)
     * @param  string $terms_url Your Terms and Conditions URL. (optional)
     * @param  string $is_show_kinde_branding Display \&quot;Powered by Kinde\&quot; on your sign up, sign in, and subscription pages. (optional)
     * @param  bool $is_click_wrap Show a policy acceptance checkbox on sign up. (optional)
     * @param  string $partner_code Your Kinde Perk code. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateBusinessAsync($business_name, $primary_email, $primary_phone = null, $industry_key = null, $timezone_id = null, $privacy_url = null, $terms_url = null, $is_show_kinde_branding = null, $is_click_wrap = null, $partner_code = null)
    {
        return $this->updateBusinessAsyncWithHttpInfo($business_name, $primary_email, $primary_phone, $industry_key, $timezone_id, $privacy_url, $terms_url, $is_show_kinde_branding, $is_click_wrap, $partner_code)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateBusinessAsyncWithHttpInfo
     *
     * Update business details
     *
     * @param  string $business_name Business name. (required)
     * @param  string $primary_email Email associated with business. (required)
     * @param  string $primary_phone Phone number associated with business. (optional)
     * @param  string $industry_key The key of the industry your business is in. (optional)
     * @param  string $timezone_id The ID of the timezone your business is in. (optional)
     * @param  string $privacy_url Your Privacy policy URL. (optional)
     * @param  string $terms_url Your Terms and Conditions URL. (optional)
     * @param  string $is_show_kinde_branding Display \&quot;Powered by Kinde\&quot; on your sign up, sign in, and subscription pages. (optional)
     * @param  bool $is_click_wrap Show a policy acceptance checkbox on sign up. (optional)
     * @param  string $partner_code Your Kinde Perk code. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateBusinessAsyncWithHttpInfo($business_name, $primary_email, $primary_phone = null, $industry_key = null, $timezone_id = null, $privacy_url = null, $terms_url = null, $is_show_kinde_branding = null, $is_click_wrap = null, $partner_code = null)
    {
        $returnType = '\Kinde\KindeSDK\Model\SuccessResponse';
        $request = $this->updateBusinessRequest($business_name, $primary_email, $primary_phone, $industry_key, $timezone_id, $privacy_url, $terms_url, $is_show_kinde_branding, $is_click_wrap, $partner_code);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateBusiness'
     *
     * @param  string $business_name Business name. (required)
     * @param  string $primary_email Email associated with business. (required)
     * @param  string $primary_phone Phone number associated with business. (optional)
     * @param  string $industry_key The key of the industry your business is in. (optional)
     * @param  string $timezone_id The ID of the timezone your business is in. (optional)
     * @param  string $privacy_url Your Privacy policy URL. (optional)
     * @param  string $terms_url Your Terms and Conditions URL. (optional)
     * @param  string $is_show_kinde_branding Display \&quot;Powered by Kinde\&quot; on your sign up, sign in, and subscription pages. (optional)
     * @param  bool $is_click_wrap Show a policy acceptance checkbox on sign up. (optional)
     * @param  string $partner_code Your Kinde Perk code. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateBusinessRequest($business_name, $primary_email, $primary_phone = null, $industry_key = null, $timezone_id = null, $privacy_url = null, $terms_url = null, $is_show_kinde_branding = null, $is_click_wrap = null, $partner_code = null)
    {
        // verify the required parameter 'business_name' is set
        if ($business_name === null || (is_array($business_name) && count($business_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $business_name when calling updateBusiness'
            );
        }
        // verify the required parameter 'primary_email' is set
        if ($primary_email === null || (is_array($primary_email) && count($primary_email) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $primary_email when calling updateBusiness'
            );
        }

        $resourcePath = '/api/v1/business';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $business_name,
            'business_name', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $primary_email,
            'primary_email', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $primary_phone,
            'primary_phone', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $industry_key,
            'industry_key', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $timezone_id,
            'timezone_id', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $privacy_url,
            'privacy_url', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $terms_url,
            'terms_url', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $is_show_kinde_branding,
            'is_show_kinde_branding', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $is_click_wrap,
            'is_click_wrap', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $partner_code,
            'partner_code', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json; charset=utf-8']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json; charset=utf-8'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        } else {
            $token = $this->storage->getAccessToken();
            if (!empty($token)) {
                $headers['Authorization'] = 'Bearer ' . $token;
            }
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PATCH',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
