<?php
/**
 * User
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Kinde\KindeSDK
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Kinde Management API
 *
 * Provides endpoints to manage your Kinde Businesses
 *
 * The version of the OpenAPI document: 1
 * Contact: support@kinde.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.1.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Kinde\KindeSDK\Model;

use \ArrayAccess;
use \Kinde\KindeSDK\ObjectSerializer;

/**
 * User Class Doc Comment
 *
 * @category Class
 * @package  Kinde\KindeSDK
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class User implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'user';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'provided_id' => 'string',
        'preferred_email' => 'string',
        'last_name' => 'string',
        'first_name' => 'string',
        'is_suspended' => 'bool',
        'picture' => 'string',
        'total_sign_ins' => 'int',
        'failed_sign_ins' => 'int',
        'last_signed_in' => 'string',
        'created_on' => 'string',
        'organizations' => 'string[]',
        'identities' => '\Kinde\KindeSDK\Model\UserIdentitiesInner[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'provided_id' => null,
        'preferred_email' => null,
        'last_name' => null,
        'first_name' => null,
        'is_suspended' => null,
        'picture' => null,
        'total_sign_ins' => null,
        'failed_sign_ins' => null,
        'last_signed_in' => null,
        'created_on' => null,
        'organizations' => null,
        'identities' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'provided_id' => 'provided_id',
        'preferred_email' => 'preferred_email',
        'last_name' => 'last_name',
        'first_name' => 'first_name',
        'is_suspended' => 'is_suspended',
        'picture' => 'picture',
        'total_sign_ins' => 'total_sign_ins',
        'failed_sign_ins' => 'failed_sign_ins',
        'last_signed_in' => 'last_signed_in',
        'created_on' => 'created_on',
        'organizations' => 'organizations',
        'identities' => 'identities'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'provided_id' => 'setProvidedId',
        'preferred_email' => 'setPreferredEmail',
        'last_name' => 'setLastName',
        'first_name' => 'setFirstName',
        'is_suspended' => 'setIsSuspended',
        'picture' => 'setPicture',
        'total_sign_ins' => 'setTotalSignIns',
        'failed_sign_ins' => 'setFailedSignIns',
        'last_signed_in' => 'setLastSignedIn',
        'created_on' => 'setCreatedOn',
        'organizations' => 'setOrganizations',
        'identities' => 'setIdentities'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'provided_id' => 'getProvidedId',
        'preferred_email' => 'getPreferredEmail',
        'last_name' => 'getLastName',
        'first_name' => 'getFirstName',
        'is_suspended' => 'getIsSuspended',
        'picture' => 'getPicture',
        'total_sign_ins' => 'getTotalSignIns',
        'failed_sign_ins' => 'getFailedSignIns',
        'last_signed_in' => 'getLastSignedIn',
        'created_on' => 'getCreatedOn',
        'organizations' => 'getOrganizations',
        'identities' => 'getIdentities'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = $data['id'] ?? null;
        $this->container['provided_id'] = $data['provided_id'] ?? null;
        $this->container['preferred_email'] = $data['preferred_email'] ?? null;
        $this->container['last_name'] = $data['last_name'] ?? null;
        $this->container['first_name'] = $data['first_name'] ?? null;
        $this->container['is_suspended'] = $data['is_suspended'] ?? null;
        $this->container['picture'] = $data['picture'] ?? null;
        $this->container['total_sign_ins'] = $data['total_sign_ins'] ?? null;
        $this->container['failed_sign_ins'] = $data['failed_sign_ins'] ?? null;
        $this->container['last_signed_in'] = $data['last_signed_in'] ?? null;
        $this->container['created_on'] = $data['created_on'] ?? null;
        $this->container['organizations'] = $data['organizations'] ?? null;
        $this->container['identities'] = $data['identities'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id Unique id of the user in Kinde.
     *
     * @return self
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets provided_id
     *
     * @return string|null
     */
    public function getProvidedId()
    {
        return $this->container['provided_id'];
    }

    /**
     * Sets provided_id
     *
     * @param string|null $provided_id External id for user.
     *
     * @return self
     */
    public function setProvidedId($provided_id)
    {
        $this->container['provided_id'] = $provided_id;

        return $this;
    }

    /**
     * Gets preferred_email
     *
     * @return string|null
     */
    public function getPreferredEmail()
    {
        return $this->container['preferred_email'];
    }

    /**
     * Sets preferred_email
     *
     * @param string|null $preferred_email Default email address of the user in Kinde.
     *
     * @return self
     */
    public function setPreferredEmail($preferred_email)
    {
        $this->container['preferred_email'] = $preferred_email;

        return $this;
    }

    /**
     * Gets last_name
     *
     * @return string|null
     */
    public function getLastName()
    {
        return $this->container['last_name'];
    }

    /**
     * Sets last_name
     *
     * @param string|null $last_name User's last name.
     *
     * @return self
     */
    public function setLastName($last_name)
    {
        $this->container['last_name'] = $last_name;

        return $this;
    }

    /**
     * Gets first_name
     *
     * @return string|null
     */
    public function getFirstName()
    {
        return $this->container['first_name'];
    }

    /**
     * Sets first_name
     *
     * @param string|null $first_name User's first name.
     *
     * @return self
     */
    public function setFirstName($first_name)
    {
        $this->container['first_name'] = $first_name;

        return $this;
    }

    /**
     * Gets is_suspended
     *
     * @return bool|null
     */
    public function getIsSuspended()
    {
        return $this->container['is_suspended'];
    }

    /**
     * Sets is_suspended
     *
     * @param bool|null $is_suspended Whether the user is currently suspended or not.
     *
     * @return self
     */
    public function setIsSuspended($is_suspended)
    {
        $this->container['is_suspended'] = $is_suspended;

        return $this;
    }

    /**
     * Gets picture
     *
     * @return string|null
     */
    public function getPicture()
    {
        return $this->container['picture'];
    }

    /**
     * Sets picture
     *
     * @param string|null $picture User's profile picture URL.
     *
     * @return self
     */
    public function setPicture($picture)
    {
        $this->container['picture'] = $picture;

        return $this;
    }

    /**
     * Gets total_sign_ins
     *
     * @return int|null
     */
    public function getTotalSignIns()
    {
        return $this->container['total_sign_ins'];
    }

    /**
     * Sets total_sign_ins
     *
     * @param int|null $total_sign_ins Total number of user sign ins.
     *
     * @return self
     */
    public function setTotalSignIns($total_sign_ins)
    {
        $this->container['total_sign_ins'] = $total_sign_ins;

        return $this;
    }

    /**
     * Gets failed_sign_ins
     *
     * @return int|null
     */
    public function getFailedSignIns()
    {
        return $this->container['failed_sign_ins'];
    }

    /**
     * Sets failed_sign_ins
     *
     * @param int|null $failed_sign_ins Number of consecutive failed user sign ins.
     *
     * @return self
     */
    public function setFailedSignIns($failed_sign_ins)
    {
        $this->container['failed_sign_ins'] = $failed_sign_ins;

        return $this;
    }

    /**
     * Gets last_signed_in
     *
     * @return string|null
     */
    public function getLastSignedIn()
    {
        return $this->container['last_signed_in'];
    }

    /**
     * Sets last_signed_in
     *
     * @param string|null $last_signed_in Last sign in date in ISO 8601 format.
     *
     * @return self
     */
    public function setLastSignedIn($last_signed_in)
    {
        $this->container['last_signed_in'] = $last_signed_in;

        return $this;
    }

    /**
     * Gets created_on
     *
     * @return string|null
     */
    public function getCreatedOn()
    {
        return $this->container['created_on'];
    }

    /**
     * Sets created_on
     *
     * @param string|null $created_on Date of user creation in ISO 8601 format.
     *
     * @return self
     */
    public function setCreatedOn($created_on)
    {
        $this->container['created_on'] = $created_on;

        return $this;
    }

    /**
     * Gets organizations
     *
     * @return string[]|null
     */
    public function getOrganizations()
    {
        return $this->container['organizations'];
    }

    /**
     * Sets organizations
     *
     * @param string[]|null $organizations Array of organizations a user belongs to.
     *
     * @return self
     */
    public function setOrganizations($organizations)
    {
        $this->container['organizations'] = $organizations;

        return $this;
    }

    /**
     * Gets identities
     *
     * @return \Kinde\KindeSDK\Model\UserIdentitiesInner[]|null
     */
    public function getIdentities()
    {
        return $this->container['identities'];
    }

    /**
     * Sets identities
     *
     * @param \Kinde\KindeSDK\Model\UserIdentitiesInner[]|null $identities Array of identities belonging to the user.
     *
     * @return self
     */
    public function setIdentities($identities)
    {
        $this->container['identities'] = $identities;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


